review_prompt: |
  이 코드를 한국어로 리뷰해 주세요.
  코드 스타일, 버그 가능성, 가독성 등을 포함해서 피드백을 작성해 주세요.
  
review:
  enable_auto_review: false
  comment_mode: comments             
  languages: ["java", "kotlin", "yaml", "properties"]
  max_comments: 40
  review_depth: deep                 

ignore_patterns:
  - "build/**"
  - "target/**"
  - "out/**"
  - "**/generated/**"
  - "**/resources/static/**"
  - "**/resources/templates/**"
  - "**/node_modules/**"

assistant:
  tone: professional                 
  detail_level: detailed             
  include_code_examples: false       

summary:
  include_summary_comment: true
  summarize_key_findings: true
  summarize_recommendations: true

# 🔍 리뷰 기준 (코멘트 포인트 중심)
rules:
  - name: "Object-Oriented Design"
    description: >
      - 클래스와 메서드가 단일 책임 원칙(SRP)을 따르는지 확인합니다.
      - 클래스 간 결합도가 낮고 응집도가 높은지 검토합니다.
      - 상속보다 조합(Composition)을 적절히 활용했는지 봅니다.

  - name: "Separation of Concerns"
    description: >
      - 비즈니스 로직, 데이터 접근, 프레젠테이션 로직이 적절히 분리되어 있는지 확인합니다.
      - 컨트롤러에서 서비스 로직을 직접 호출하거나 처리하지 않는지 검토합니다.
      - Config, Domain, Service, Controller 레이어 간 경계가 명확한지 봅니다.

  - name: "Spring idiomatic usage"
    description: >
      - Spring의 의존성 주입, AOP, 빈 스코프, 트랜잭션 관리 등을 자바스럽게, 스프링스럽게 사용했는지 검토합니다.
      - @Component, @Service, @Repository 등의 어노테이션이 적절히 구분되어 있는지 확인합니다.
      - 빈 등록이나 설정 클래스가 과도하게 비대하지 않은지 봅니다.

  - name: "Java best practices"
    description: >
      - Optional, Stream, Record, Sealed Class 등 자바 언어 특성을 자연스럽게 활용했는지 봅니다.
      - Null 처리, 예외 처리, 불변성(immutability) 원칙이 잘 적용되었는지 검토합니다.
      - Enum, Interface, Generic 등 언어적 표현력이 충분히 사용되었는지 확인합니다.

  - name: "Test-driven approach"
    description: >
      - 테스트 코드가 명확한 시나리오를 표현하고 있는지 확인합니다.
      - 단위 테스트에서 외부 의존성을 Mock으로 처리하고 있는지 봅니다.
      - given-when-then 구조로 테스트 의도가 잘 드러나는지 검토합니다.
      - 서비스, 도메인, 리포지토리 각각에 대해 충분한 테스트 커버리지가 있는지 확인합니다.

  - name: "Responsibility clarity"
    description: >
      - 클래스명, 메서드명이 책임을 명확히 드러내는지 검토합니다.
      - 중복 로직이 여러 모듈에 퍼져 있지 않은지 확인합니다.
      - 유틸성 코드가 도메인 로직을 오염시키지 않았는지 봅니다.

  - name: "Maintainability & readability"
    description: >
      - 메서드 길이가 과도하게 길지 않은지, 의미 있는 블록 단위로 나뉘었는지 확인합니다.
      - 복잡한 분기/조건문을 단순화할 수 있는지 제안합니다.
      - 코드 주석이 설계 의도를 표현하고 있는지, 단순한 설명에 그치지 않는지 봅니다.
  - name: "Design Intent & Why Reasoning"
    description: >
      - 코드의 의도(intention)를 중심으로 '왜 이런 설계를 선택했는가?'를 질문하는 코멘트를 남깁니다.
      - 단순 구현보다 “의도와 맥락”이 드러나는지, 그 필요성이 충분했는지 검토합니다.
      - 예: "이 클래스에서 @Transactional을 사용한 이유가 명확할까요? 서비스 계층 전체에 트랜잭션이 필요한지 다시 생각해볼 여지가 있습니다."

  - name: "Refactoring & How Suggestions"
    description: >
      - 개선 방법을 제안할 때는 마틴 파울러의 『리팩터링 2판』과 켄트 벡의 『구현 패턴』 원칙을 기반으로 코멘트를 남깁니다.
      - 예: "이 메서드는 한 가지 이상의 일을 하고 있습니다. 'Extract Method' 리팩터링을 고려해보세요."
      - 예: "조건 분기가 복잡해졌습니다. 켄트 벡의 'Composed Method' 패턴으로 단순화할 수 있습니다."

  - name: "Object-Oriented Design & Responsibility"
    description: >
      - 각 클래스/메서드가 명확한 책임을 갖는지(SRP, DIP, OCP) 점검합니다.
      - 역할(Role)과 협력(Collaboration) 중심으로 객체 간 상호작용을 리뷰합니다.
      - “이 객체가 이 책임을 가져야 할 이유가 충분한가?”를 스스로 물을 수 있게 유도하는 코멘트를 달도록 합니다.

  - name: "Separation of Concerns & Layer Boundaries"
    description: >
      - 계층 간 경계가 모호하거나 역할이 중첩될 경우, 왜 그렇게 되었는지 질문하고
        더 나은 분리(How to improve)를 제안합니다.
      - 예: "이 로직은 도메인 서비스로 옮기는 편이 더 자연스러울 수 있습니다. 컨트롤러의 책임이 확장되고 있지 않은가요?"

  - name: "Spring Idiomatic Usage"
    description: >
      - 스프링이 제공하는 기능(@Transactional, @Configuration, @EventListener 등)을
        ‘왜 이 시점에서 사용했는지’ 중심으로 평가합니다.
      - 잘못된 어노테이션 위치나 빈 의존성을 발견하면 “어떻게(How)” 개선할 수 있는지 구체적 제안 포함.
      - 예: "@Autowired 필드 주입 대신 생성자 주입으로 변경하면 테스트 가능성이 높아집니다."

  - name: "Test-Driven Development & Example Clarity"
    description: >
      - 테스트 코드가 설계 의도를 표현하는가? (켄트 벡의 TDD by Example 철학)
      - Given-When-Then 구조가 명확한가?
      - “이 테스트가 무엇을 증명하려는가?”라는 Why 관점을 코멘트합니다.
      - 예: "이 테스트는 성공 케이스만 검증합니다. 실패 케이스나 경계 조건도 함께 고려해보세요."

  - name: "Maintainability & Composed Method"
    description: >
      - 메서드가 읽히는 순서와 논리 흐름이 자연스러운가?
      - 켄트 벡의 ‘Composed Method’ 원칙에 따라 메서드가 단계적으로 읽히는지 검토합니다.
      - “이 메서드는 읽기 순서가 자연스러운가? 아니면 동작 중심인가?”를 묻는 코멘트를 추가합니다.

  - name: "Naming & Intention-Revealing Code"
    description: >
      - 네이밍이 의도를 드러내는지(켄트 벡의 Intention-Revealing Names 원칙) 확인합니다.
      - 메서드명이 ‘무엇을 하는지’보다 ‘왜 존재하는지’를 드러내야 합니다.
      - 예: "processData() → validateAndPersistOrder()처럼 의도를 더 명확히 드러내면 어때요?"
